version: '3.8'
volumes:
  esdata1:
    driver: local
  esdata2:
    driver: local
  esdata3:
    driver: local
  mongo:
    driver: local

networks:
  studio9:
  
services:
  
  es-master-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.4
    container_name: es-master-1
    env_file:
      - ./envs/es-master-1.env
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 20000:9200
    networks:
      - studio9
  
  es-data-1:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.4
    env_file:
      - ./envs/es-data-1.env
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    depends_on:
    - es-master-1
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    networks:
      - studio9
  
  es-data-2:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.4
    env_file:
      - ./envs/es-data-2.env
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    volumes:
      - esdata3:/usr/share/elasticsearch/data
    networks:
      - studio9
    depends_on:
    - es-data-1
    - es-master-1
  
  es-migrate:
    image: ubuntu
    env_file:
      - ./envs/es-migrate.env
    volumes:
    - "$PWD/schema-migration/es-migrate:/es-migrate"
    networks:
      studio9:
    command:
    - "bash"
    - "-c"
    - |
      cd /es-migrate/scripts
      bash -x elasticsearch_init.sh
  
  kibana:
    image: kibana:5.6.4
    container_name: kibana
    ports:
      - 20001:5601
    env_file:
      - ./envs/kibana.env
    networks:
      studio9:
    depends_on:
    - es-data-1
    - es-master-1
    - es-data-2
  
  mongo:
    image: mongo
    container_name: mongodb
    ports:
      - 20002:27017
    env_file:
      - ./envs/mongo.env
    networks:
      studio9:
    volumes:
      - mongo:/data/db
  
  mongo-migrate-um-svc:
    image: node
    volumes:
    - "$PWD/schema-migration/mongo-migrate/um-service:/um-service"
    container_name: migrate-um-mongo
    env_file:
      - ./envs/mongo-migrate.env
    command:
    - "bash"
    - "-c"
    - |
      cd /um-service
      bash -x migrateStagingMongo.sh
    networks:
      - studio9
    depends_on:
    - mongo

  mongo-migrate-baile:
    image: rishivantsingh9717/studio9_baile:latest
    container_name: migrate-baile-mongo
    env_file:
      - ./envs/mongo-migrate-baile.env
    entrypoint:
    - bin/mongo-migration-app
    networks:
      studio9:
    depends_on:
      - mongo
  
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    env_file:
      - ./envs/mongo-express.env
    networks:
      - studio9
    depends_on:
      - mongo
    ports:
    - 20003:8081
    command:
    - "sh"
    - "-c"
    - |
      sleep 30
      tini -- /docker-entrypoint.sh mongo-express

  zookeeper:
    image: zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
    - 20004:2181
    restart: always
    networks:
      - studio9
  
  rabbit:
    image: rabbitmq:3-management
    container_name: rabbit
    hostname: rabbit
    ports:
    - 20005:5672
    - 20006:15672
    env_file:
      - ./envs/rabbit.env
    networks:
      - studio9

  aries-rest-api:
    image: 086351999451.dkr.ecr.ap-south-1.amazonaws.com/aries-api-rest:1.0
    container_name: aries-rest
    depends_on:
    - es-data-1
    - es-master-1
    - es-data-2
    env_file:
      - ./envs/aries.env
    ports:
    - 20007:9000
    networks:
    - studio9
    healthcheck:
      test: ["CMD", "curl","-I","localhost:9000/v1/health"]
      interval: 4s
      timeout: 20s
      retries: 5
      start_period: 15s
    labels:
      maintainer: "MAyank"
      about: "Orion service"
    restart: unless-stopped

# Cortex service

  cortex-rest-api:
    image: rishivantsingh9717/cortex-api-rest:1.0
    env_file:
     - ./envs/cortex.env
    ports:
    - 20008:9000
    networks:
    - studio9
    healthcheck:
      test: ["CMD", "curl","-I","localhost:9000/v1/health"]
      interval: 4s
      timeout: 20s
      retries: 5
      start_period: 15s
    depends_on:
    - aries-rest-api

# argo-api-rest
  
  argo-api-rest:
    image: 086351999451.dkr.ecr.ap-south-1.amazonaws.com/argo-api-rest:1.0
    env_file:
     - ./envs/argo.env
    ports:
    - 20009:9000
    networks:
    - studio9
    healthcheck:
      test: ["CMD", "curl","-I","localhost:9000/v1/health"]
      interval: 4s
      timeout: 20s
      retries: 5
      start_period: 15s
    depends_on:
    - es-data-1
    - es-master-1
    - es-data-2

#   gemini service

  gemini:
    image: 086351999451.dkr.ecr.ap-south-1.amazonaws.com/gemini:1.0
    env_file:
     - ./envs/gemini.env
    ports:
    - 20010:7777
    networks:
    - studio9
    healthcheck:
      test: ["CMD", "curl","-I","localhost:7777/v1/health"]
      interval: 4s
      timeout: 20s
      retries: 5
      start_period: 15s
    depends_on:
    - zookeeper
    - sql-server

    #taurus service
  

  taurus:
    image: 086351999451.dkr.ecr.ap-south-1.amazonaws.com/tauraus:1.0
    env_file:
     - ./envs/taurus.env
    ports:
    - 20011:9000
    networks:
    - studio9
    healthcheck:
      test: ["CMD", "curl","-I","localhost:9000/v1/health"]
      interval: 4s
      timeout: 20s
      retries: 5
      start_period: 15s
    depends_on:
    - rabbit
    - cortex-rest-api
    - baile
    - argo-api-rest

  orion-rest-api:
    image: 086351999451.dkr.ecr.ap-south-1.amazonaws.com/orion-api-rest:1.0
    container_name: orion-rest
    depends_on: 
      - cortex-rest-api
    env_file:
      - ./envs/orion.env
    ports:
      - 20012:9000
      - 20013:2552
    init: true
    networks:
      - studio9
    healthcheck:
      test: ["CMD", "curl","-I","localhost:9000/v1/health"]
      interval: 4s
      timeout: 20s
      retries: 5
      start_period: 15s
    labels:
      maintainer: "MAyank"
      about: "Orion service"
    restart: unless-stopped

  pegasus-rest-api:
    image: 086351999451.dkr.ecr.ap-south-1.amazonaws.com/studio9-pegasus-api-rest:0.1
    container_name: pegasus-rest
    depends_on:
      - taurus
    env_file:
      - ./envs/pegasus.env
    ports:
      - 20014:9000
    init: true
    networks:
      - studio9
    healthcheck:
      test: ["CMD", "curl","-I","localhost:9000/v1/health"]
      interval: 4s
      timeout: 20s
      retries: 5
      start_period: 15s
    labels:
      maintainer: "MAyank"
      about: "Pegasus-service"
    restart: unless-stopped

  # um-Service
  um-service:
    image: 086351999451.dkr.ecr.ap-south-1.amazonaws.com/um-service:1.02
    container_name: um_service
    ports: 
      - "20015:9000"
    env_file:
      - ./envs/um_service.env
    networks:
      - studio9





# baile
  baile:
    image: rishivantsingh9717/studio9_baile:latest
    container_name: baile
    ports: 
      - "20016:9000"
    env_file:
      - ./envs/baile.env
    networks:
      - studio9




# sql-server

  sql-server:
    image: rishivantsingh9717/sql-server:1.0
    container_name: sql-server
    ports: 
      - "20017:8000"
      - "20018:2552"
    env_file:
      - ./envs/sql.env
    networks:
      - studio9
    healthcheck:
      test: ["CMD", "curl","-I","localhost:8000/sql-server/v0.1/health"]
      interval: 4s
      timeout: 20s
      retries: 5
      start_period: 15s

