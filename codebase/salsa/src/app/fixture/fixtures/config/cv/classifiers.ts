import { ICVClassifier } from '../../../../train/cv-architecture.interfaces';
import { IFixtureData } from '../../../fixture.interface';

export const cvClassifiers: IFixtureData<ICVClassifier>  = {
  data: [
    {
      id: 'FCN_1LAYER',
      name: 'FCN 1-layer Classifier',
      isNeural: true,
      packageName: 'FCN_PACKAGE',
      packageVersion: '1',
      module: 'FCNModule',
      className: '1-layerClass',
    },
    {
      id: 'FCN_2LAYER',
      name: 'FCN 2-layer Classifier',
      isNeural: true,
      packageName: 'FCN_PACKAGE',
      packageVersion: '2',
      module: 'FCNModule',
      className: '2-layerClass',
    },
    {
      id: 'FCN_3LAYER',
      name: 'FCN 3-layer Classifier',
      isNeural: true,
      packageName: 'FCN_PACKAGE',
      packageVersion: '3',
      module: 'FCN',
      className: '3-layerClass',
    },
    {
      id: 'KPCA_MNL',
      name: 'KPCA + MNL',
      isNeural: false,
      packageName: 'KPCA_MNL_PACKAGE',
      packageVersion: '1',
      module: 'KPCAModule',
      className: 'MNLClass',
      params: [
        {
          name: 'n_components',
          caption: 'Number of principal components',
          type: 'int',
          min: 1,
          max: 3000,
          step: 1,
          defaults: [200],
        },
        {
          name: 'kernel',
          caption: 'Kernel type',
          type: 'string',
          options: ['linear', 'poly', 'rbf', 'sigmoid', 'cosine', 'precomputed'],
          defaults: ['poly'],
        },
        {
          name: 'degree',
          caption: 'Degree',
          type: 'int',
          min: 1,
          step: 1,
          conditions: {
            'kernel': {
              values: ['poly'],
            },
          },
          defaults: [3],
        },
      ],
    },
    {
      id: 'GRADIENT_BOOSTING',
      name: 'Gradient Boosting',
      isNeural: false,
      packageName: 'GRADIENT_BOOSTING_PACKAGE',
      packageVersion: '1',
      module: 'GradientModule',
      className: 'BoostingClass',
    },
    {
      id: 'RANDOM_FOREST',
      name: 'Random Forest',
      isNeural: false,
      packageName: 'RANDOM_FOREST_PACKAGE',
      packageVersion: '1',
      module: 'RandomModule',
      className: 'ForestClass',
    },
    {
      id: 'PML',
      name: 'Penalized Multinomial Logit',
      isNeural: false,
      packageName: 'PML_PACKAGE',
      packageVersion: '1',
      module: 'PenalizedModule',
      className: 'LogitClass',
    },
    {
      id: 'SVM',
      name: 'SVM',
      isNeural: false,
      packageName: 'SVM_PACKAGE',
      packageVersion: '1',
      module: 'SVMModule',
      className: 'SVMClass',
    },
    {
      id: 'RPCA_MNL',
      name: 'RPCA + MNL',
      isNeural: false,
      packageName: 'RPCA_PACKAGE',
      packageVersion: '1',
      module: 'RPCAModule',
      className: 'RPCAClass',
      params: [
        {
          name: 'n_components',
          caption: 'Number of principal components',
          type: 'int',
          min: 1,
          max: 3000,
          step: 1,
          defaults: [200],
        },
      ],
    },
    {
      id: 'FREESCALE',
      name: 'FreeScale',
      isNeural: true,
      packageName: 'FS_PACKAGE',
      packageVersion: '1',
      module: 'FSModule',
      className: 'FreeScale',
    },
    {
      id: 'CLASSIFIER_WITH_PARAMS',
      name: 'Classifier with params',
      isNeural: true,
      packageName: 'package',
      packageVersion: '1',
      module: 'module',
      className: 'ClassName',
      params: [
        {
          name: 'boolean_param',
          caption: 'Boolean Parameter',
          type: 'boolean',
          defaults: [true],
        },
        {
          name: 'n1',
          caption: 'N1 Parameter',
          multiple: false,
          options: [],
          defaults: ['test1'],
          type: 'string',
        },
        {
          name: 'string_param',
          caption: 'String Parameter',
          type: 'string',
          options: ['value1', 'value2'],
          defaults: ['value2'],
        },
        {
          name: 'int_param',
          caption: 'Integer Parameter',
          type: 'int',
          min: 1,
          step: 1,
          defaults: [2],
        },
      ],
    },
  ],
  options: {
    indices: ['id'],
  },
};
