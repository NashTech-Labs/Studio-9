http {
  interface = "0.0.0.0"
  port = 9000
  prefix = "v2.0"
  prefix = ${?HTTP_SERVER_PREFIX}
}

private-http {
  interface = "0.0.0.0"
  port = 9001
  prefix = "v2.0"
  prefix = ${?PRIVATE_HTTP_SERVER_PREFIX}

  username = "username"
  username = ${?INTERNAL_API_USERNAME}

  password = "predict-me"
  password = ${?INTERNAL_API_PASSWORD}

}

process-monitor {
  process-check-interval = 30 seconds
  process-check-interval = ${?PROCESS_CHECK_INTERVAL}
  read-stored-processes = false
  read-stored-processes = ${?READ_STORED_PROCESSES}
  startup-request-timeout = 1 minute
}

canonical-hostname = "127.0.0.1"
canonical-hostname = ${?LIBPROCESS_IP}

canonical-port = 2552
canonical-port = ${?PORT_2552}

# This url points to Baile
base-app-url = "http://localhost:9000"
base-app-url = ${?BASE_APP_URL}

# This url points to UI
web-app-url = ""
web-app-url = ${?WEB_APP_URL}

html {
  layout-template = "layout.html"
}

file-uploading {
  target-prefix = "baile/source"
}

entity-importing {
  max-meta-size = 5MB
}

um-service {
  username-remind-template = "username-remind.html"
  client-id = "um-id"
  client-id = ${?UM_CLIENT_ID}
  client-secret = "um-secret"
  client-secret = ${?UM_CLIENT_SECRET}
  url = "http://um.service.example.com"
  url = ${?UM_SERVICE_URL}
  org-id = "org-id"
  org-id = ${?UM_SERVICE_ORG_ID}
  um-timeout = 30
  um-timeout = ${?UM_TIMEOUT}
  admin-role-id = "adminId"
  admin-role-id = ${?ADMIN_ROLE_ID}
  require-email-confirmation = true
  require-email-confirmation = ${?REQUIRE_EMAIL_CONFIRMATION}
  # Upper limit to the time period an entry is allowed to remain in the cache.
  # Set to 'infinite' to disable eviction based on time of write (create or update).
  user-token-ttl = 5 minutes
  user-token-ttl = ${?UM_USER_TOKEN_TTL}
}

routes {
  debug-exceptions = false
  debug-exceptions = ${?DEBUG_EXCEPTIONS}
  default-page-size = 30
}

akka {
  http {
    server {
      idle-timeout = 60 s
      request-timeout = 120 s
      max-connections = 1024
    }

    parsing {
      max-content-length = 100m
    }

    client {
      connecting-timeout = 120 s
      response-timeout = 60 s
      max-retries = 3
      first-retry-delay = 100 milliseconds
    }

    host-connection-pool {
      max-connections = 1024
      max-retries = 3
      max-open-requests = 16384
    }
  }

  actor {
    provider = "cluster"
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = ${canonical-hostname}
      port = ${canonical-port}
      bind-hostname = "0.0.0.0"
      bind-port = 2552
    }
  }

  cluster {
    seed.zookeeper {
      url = "127.0.0.1:2181"
      url = ${?ZOOKEEPER_URL}
      path = "/akka/baile-cluster/seed"
      host_env_var = ${canonical-hostname}
      port_env_var = ${canonical-port}
    }
    pub-sub.send-to-dead-letters-when-no-subscribers = off
  }

}

aws {
  access-key = ""
  access-key = ${?AWS_ACCESS_KEY}
  secret-key = ""
  secret-key = ${?AWS_SECRET_KEY}
  s3.bucketName = "dev.deepcortex.ai"
  s3.bucketName = ${?AWS_S3_BUCKET}
  region = "us-east-1"
  region = ${?AWS_REGION}
  key-prefix = "baile/data/"
  key-prefix = ${?AWS_KEY_PREFIX}
  arn-partition = "aws"
  arn-partition = ${?AWS_ARN_PARTITION}

  predefined-buckets = [
    {
      id = "56352ab1-65b7-4820-9f5f-00d11f3563ba"
      name = ""
      name = ${?PREDEF_BUCKET_0_NAME}
      access-key = ""
      access-key = ${?PREDEF_BUCKET_0_ACCESS_KEY}
      secret-key = ""
      secret-key = ${?PREDEF_BUCKET_0_SECRET_KEY}
      region = "us-east-1"
      region = ${?PREDEF_BUCKET_0_REGION}
    },
    {
      id = "bf3f3aec-967f-4bce-99cd-5f56479d1306"
      name = ""
      name = ${?PREDEF_BUCKET_1_NAME}
      access-key = ""
      access-key = ${?PREDEF_BUCKET_1_ACCESS_KEY}
      secret-key = ""
      secret-key = ${?PREDEF_BUCKET_1_SECRET_KEY}
      region = "us-east-1"
      region = ${?PREDEF_BUCKET_1_REGION}
    }
  ]
  policy {
    s3-access-policy-path = "s3-access-policy.json"
  }

  # Value must be less than or equal to 43200 seconds
  temporary-credentials-duration = 43200
  temporary-credentials-role-arn = ${?TEMPORARY_CREDENTIALS_ROLE_ARN}
}

cortex {
  rest-url = "http://localhost:9011"
  rest-url = ${?CORTEX_URL}
  api-version = v1
  user = john.doe
  user = ${?CORTEX_USER}
  password = blackcat
  password = ${?CORTEX_PASSWORD}
  job {
    dir = "tmp/deepcortex/jobs"
  }
}

aries {
  rest-url = "http://localhost:9012"
  rest-url = ${?ARIES_URL}
  api-version = ${cortex.api-version}
  user = john.doe
  user = ${?ARIES_USER}
  password = blackcat
  password = ${?ARIES_PASSWORD}
}

argo {
  rest-url = "http://localhost:9013"
  rest-url = ${?ARGO_URL}
  api-version = v1
  user = john.doe
  user = ${?ARGO_USERNAME}
  password = blackcat
  password = ${?ARGO_PASSWORD}
}

gemini {
  rest-url = "http://localhost:9014"
  rest-url = ${?GEMINI_URL}
  api-version = v0.1
  user = john.doe
  user = ${?GEMINI_USER}
  password = blackcat
  password = ${?GEMINI_PASSWORD}
}

jupyter {
  session {
    node-params {
      cpus = 1
      cpus = ${?JUPYTER_SESSION_NODE_CPUS}
      gpus = 1
      gpus = ${?JUPYTER_SESSION_NODE_GPUS}
    }
    monitor.startup-request-timeout = 1 minute
  }
}

mongo {
  url = "mongodb://localhost:27017/"
  url = ${?MONGODB_URL}
  db-name = "test"
  db-name = ${?MONGODB_DB_NAME}
  migrations {
    collection-name = "_migrations"
  }
}

sharing {
  notification-invitation-template = "sharing-notification.html"
  signup-base-url = ""
  signup-base-url = ${?SIGNUP_BASE_URL}
  app-url = ${web-app-url}
}


mailer {
  hostname = "localhost"
  hostname = ${?MAILER_HOSTNAME}
  port = 25
  port = ${?MAILER_PORT}
  username = ""
  username = ${?MAILER_USERNAME}
  password = ""
  password = ${?MAILER_PASSWORD}
  sender-email = "baile@sentrana.com"
  sender-email = ${?MAILER_SENDER_EMAIL}
  sender-name = "Deep Cortex"
  sender-name = ${?MAILER_SENDER_NAME}
  protocol = "smtp"
}

album {
  labels-uploading {
    csv-lines-chunk-size = 20000
  }
  images-job-result-processing {
    batch-size = 500
  }
  storage-prefix = ${aws.key-prefix}
}

dc-project {
  storage-prefix = ${aws.key-prefix}
}

package {
  storage-prefix = ${aws.key-prefix}
}

tables {
  histogram-length = 120
}

dataset {
  storage-prefix = ${aws.key-prefix}
}

tabular-storage {
  jdbc-driver = "redshift"
  jdbc-driver = ${?TABLE_STORAGE_PROTOCOL}
  host = "redshift.amazonaws.com"
  host = ${?TABLE_STORAGE_HOST}
  port = "1234"
  port = ${?TABLE_STORAGE_PORT}
  database = "test"
  database = ${?TABLE_STORAGE_DATABASE}
  username = "username"
  username = ${?TABLE_STORAGE_USERNAME}
  password = "xxxxxxxxxxxxxxxxxxx"
  password = ${?TABLE_STORAGE_PASSWORD}
  connection-pool {
    pool-name = "baile-db-pool"
    initial-size = 0
    max-size = 8
    connection-timeout = 500
    driver-name = "com.amazon.redshift.jdbc42.Driver"
  }
  max-preview-count = 100
  fetch-size = 50000 // in cells, NOT in rows

  dremio {
    actor-timeout = 30 seconds
    job {
      max-retries = 250
      retry-delay = 100 milliseconds
    }
  }

}

tabular-models {
  probability-columns-prefix = "class_probability_"
  module-name = "ml_lib.tabular.fused_pipeline_stage"
  class-name = "FusedTabularPipeline"
  package-name = "deepcortex-ml-lib"
}

online-prediction {
  streamid = "8e25ced2-8fe4-4eae-8754-189a9af94f4a"
  streamid = ${?ONLINE_PREDICTION_STREAM_ID}
}

dremio {
  url = "http://localhost:9047"
  url = ${?DREMIO_BASE_URL}
  username = "username"
  username = ${?DREMIO_USERNAME}
  password = "password"
  password = ${?DREMIO_PASSWORD}
  space = "deepcortex"
  space = ${?DREMIO_SPACE}
  initial-token-timeout = 30 seconds
  token-refresh-period = 15 hours
}

cv-model {
  album-population {
    batch-size = 1000
    parallelism-level = 5
  }
}
