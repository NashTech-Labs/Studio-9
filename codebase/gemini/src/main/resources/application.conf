http {
  interface = "0.0.0.0"
  port = "7777"
  prefix = "v0.1"
  auth {
    username = ${?HTTP_AUTH_USERNAME}
    password = ${?HTTP_AUTH_PASSWORD}
  }
}

canonical-hostname = "127.0.0.1"
canonical-hostname = ${?LIBPROCESS_IP}

canonical-port = 2552
canonical-port = ${?PORT_2552}

hostname = ${?HOSTNAME}

deepcortex-url = "http://baile/v2.0"
deepcortex-url = ${?DEEPCORTEX_URL}

sql-server-url = "http://sql-server/v1.0"
sql-server-url = ${?SQL_SERVER_URL}

routes {
  debug-exceptions = true
}

akka {
  actor {
    provider = cluster
    warn-about-java-serializer-usage = false
    # which serializers are available under which key
    serializers {
      java = "akka.serialization.JavaSerializer"
    }

    # which interfaces / traits / classes should be handled by which serializer
    serialization-bindings {
      "java.io.Serializable" = java
    }
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = ${canonical-hostname}
      port = ${canonical-port}
      bind-hostname = "0.0.0.0"
      bind-port = 2552
    }
  }
  cluster {
    seed.zookeeper {
      url = "127.0.0.1:2181"
      url = ${?ZOOKEEPER_URL}
      path = "/akka/gemini-cluster/seed"
      host_env_var = ${canonical-hostname}
      port_env_var = ${canonical-port}
    }
    pub-sub.send-to-dead-letters-when-no-subscribers = off
  }

  extensions = [akka.persistence.Persistence]
  persistence {
    journal {
      plugin = "akka-contrib-mongodb-persistence-journal"
      auto-start-journals = ["akka-contrib-mongodb-persistence-journal"]
    }
    snapshot-store {
      plugin = "akka-contrib-mongodb-persistence-snapshot"
      auto-start-snapshot-stores = ["akka-contrib-mongodb-persistence-snapshot"]
    }
  }
  contrib.persistence.mongodb.mongo {
    mongouri = "mongodb://user:password@192.168.0.1:27017,192.168.0.2:27017/gemini-akka-persistence"
    mongouri = ${?AKKA_PERSISTENCE_MONGODB_URI}
    journal-collection = "persistentJournal"
    journal-index = "journal_index"
    snaps-collection = "persistentSnapshots"
    snaps-index = "snaphots_index"
    # Options:
    # ReplicaAcknowledged - requires a replica to acknowledge the write, this confirms that at least two servers have seen the write
    # Journaled - requires that the change be journaled on the server that was written to. Other replicas may not see this write on a network partition
    # Acknowledged - also known as "Safe", requires that the MongoDB server acknowledges the write. This does not require that the change be persistent anywhere but memory.
    journal-write-concern = "Journaled"
    journal-write-concern = ${?AKKA_PERSISTENCE_MONGODB_WRITE_CONCERN}
  }
}

supervisor-shard-count = 100

jupyter-lab {
  url {
    base-domain = ${?BASE_JUPYTER_LAB_DOMAIN}
    use-https = false
    use-https = ${?USE_HTTPS_FOR_JUPYTER_LAB}
  }
  application {
    docker-image = "deepcortex/cortex-tasks-jupyterlab"
    docker-image = ${?JUPYTER_APP_DOCKER_IMAGE}
    force-pull-image = true
    force-pull-image = ${?JUPYTER_APP_FORCE_PULL}
    default-memory = 1024
    default-memory = ${?JUPYTER_APP_MEMORY_LIMIT}
    default-number-of-cpus = 1
    default-number-of-gpus = 0
    heartbeat-interval = 5 seconds
    project-files-sync-interval = 1 minute
    task-resources-wait-period = 60 seconds
    task-resources-wait-period = ${?TASK_RESOURCES_WAIT_PERIOD}
    task-kill-grace-period = 30 seconds
    task-kill-grace-period = ${?TASK_KILL_GRACE_PERIOD}
  }
}

marathon-client {
  url = "http://10.15.163.100:8080"
  url = ${?MARATHON_CLIENT_URL}
}

mesos {
  master = "master.mesos:5050"
  master = ${?MESOS_MASTER}
}

resource-scheduler {
  cpus-per-slave = 4
  cpus-per-slave = ${?RS_CPUS_PER_SLAVE}
  memory-per-slave = 8192
  memory-per-slave = ${?RS_MEMORY_PER_SLAVE}
  max-machines = 4
  max-machines = ${?RS_MAX_MACHINES}
  max-cpus = 16
  max-cpus = ${?RS_MAX_CPUS}
  max-gpus = 1
  max-gpus = ${?RS_MAX_GPUS}
  actor-ask-timeout = 5 minute
  resources-allocation-timeout = 2 minute
  tasks-launch-timeout = 2 minute
}
