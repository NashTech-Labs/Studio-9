cortex-service {
  name = "cortex-api"
  version = "v1"
}

# Options: OFF, ERROR, WARNING, INFO, DEBUG
akka-loglevel = "DEBUG"
akka-loglevel = ${?AKKA_LOGLEVEL}

rabbit-hosts = "0.0.0.0"
rabbit-hosts = ${?RABBIT_HOSTS}

rabbit-username = "guest"
rabbit-username = ${?RABBIT_USERNAME}

rabbit-password = "guest"
rabbit-password = ${?RABBIT_PASSWORD}

akka {
  loglevel = ${akka-loglevel}
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  jvm-exit-on-fatal-error=off

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      event-stream = off
    }
    info {
      receive = off
      autoreceive = off
      lifecycle = off
      event-stream = off
    }
  }

  http {
    server {
      server-header = ${cortex-service.name}/${cortex-service.version}
      idle-timeout = 60 s
      request-timeout = 120 s
      max-connections = 1024
    }

    client {
      connecting-timeout = 120 s
      // Note: setting host-connection-pool.idle-timeout to infinite until
      // https://github.com/akka/akka-http/issues/1245 gets merged in a release version.
      host-connection-pool.idle-timeout = infinite
    }

    host-connection-pool {
      max-connections = 1024
      max-retries = 3
      max-open-requests = 16384
    }
  }
}

http {
  interface = "0.0.0.0"
  port = 9000

  search-user-name = "search-user"
  search-user-name = ${?HTTP_SEARCH_USER_NAME}

  search-user-password = "search-password"
  search-user-password = ${?HTTP_SEARCH_USER_PASSWORD}
}

aries {
  rest-url = "http://127.0.0.1:9001"
  rest-url = ${?ARIES_REST_URL}

  version = "v1"
  version = ${?ARIES_REST_VERSION}

  search-user-name = "search-user"
  search-user-name = ${?ARIES_SEARCH_USER_NAME}

  search-user-password = "search-password"
  search-user-password = ${?ARIES_SEARCH_USER_PASSWORD}

  command-user-name = "command-user"
  command-user-name = ${?ARIES_COMMAND_USER_NAME}

  command-user-password = "command-password"
  command-user-password = ${?ARIES_COMMAND_USER_PASSWORD}

  request-retry-count = 3
}

op-rabbit {
  topic-exchange-name = "ml_job.gateway"
  channel-dispatcher = "op-rabbit.default-channel-dispatcher"
  default-channel-dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher

    # What kind of ExecutionService to use
    executor = "fork-join-executor"

    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2

      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0

      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 4
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 10
  }
  connection {
    virtual-host = "/"
    hosts = [${rabbit-hosts}]
    username = ${rabbit-username}
    password = ${rabbit-password}
    port = 5672
    ssl = false
    connection-timeout = 3s
  }
}
